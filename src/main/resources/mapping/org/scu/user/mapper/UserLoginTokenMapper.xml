<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.scu.user.mapper.UserLoginTokenMapper">

  <sql id="allFields">
      id,
      user_id userId,
      token,
      expire_date expireDate
  </sql>

  <select id="list" parameterType="org.scu.user.vo.QUserLoginToken" resultType="org.scu.user.entity.UserLoginToken">
    select
      <include refid="allFields"/>
    FROM
      `user_login_token`
    WHERE
      1=1
    <if test="userId != null">
      AND user_id = #{userId}
    </if>
    <if test="token != null and token != ''">
      AND token = #{token}
    </if>
    limit #{startRecord}, #{endRecord}
  </select>

  <select id="count" parameterType="org.scu.user.vo.QUserLoginToken" resultType="long">
    select
      count(1)
    FROM
      `user_login_token`
    WHERE
    1=1
    <if test="user_id != null">
      AND user_id = #{userId}
    </if>
    <if test="token != null and token != ''">
      AND token = #{token}
    </if>
  </select>

  <select id="getById" parameterType="long" resultType="org.scu.user.entity.UserLoginToken">
    SELECT
      <include refid="allFields"/>
    FROM
      `user_login_token`
    WHERE
      id = #{id}
  </select>

  <insert id="insert" parameterType="org.scu.user.entity.UserLoginToken" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO `user_login_token`
    (
      user_id,
      token,
      expire_date,
      create_time,
      update_time
    )
    VALUES
    (
      #{userId},
      #{token},
      #{expireDate},
      #{createTime},
      #{updateTime}
    )
  </insert>

  <update id="update" parameterType="org.scu.user.entity.UserLoginToken">
    UPDATE
      `user_login_token`
    SET
      user_id = #{userId},
      token = #{token},
      expire_date = #{expireDate},
      update_time = #{updateTime}
    WHERE
      id = #{id}
  </update>

  <delete id="removeById" parameterType="long">
    DELETE
    FROM
      `user_login_token`
    WHERE
      id = #{id}
  </delete>

  <delete id="removeByUserId" parameterType="long">
    DELETE
    FROM
    `user_login_token`
    WHERE
    user_id = #{id}
  </delete>
</mapper>